{"version":3,"sources":["atoms.tsx","components/CreateToDo.tsx","components/ToDo.tsx","components/ToDoList.tsx","App.tsx","index.tsx","theme.ts"],"names":["Categories","output","localStorage","getItem","localData","JSON","parse","categoryState","atom","key","default","TO_DO","toDoState","toDoSelector","selector","get","toDos","category","filter","toDo","CreateToDo","setToDos","useSetRecoilState","useRecoilValue","useForm","register","handleSubmit","setValue","onSubmit","oldToDos","text","id","Date","now","required","placeholder","ToDo","onClick","event","name","currentTarget","targetIndex","findIndex","newToDo","slice","setItem","stringify","DOING","DONE","DELETE","ToDoList","useRecoilState","setCategory","value","onInput","map","GlobalStyle","createGlobalStyle","App","ReactDOM","render","StrictMode","theme","bgColor","textColor","accentColor","document","getElementById"],"mappings":"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","file":"static/js/main.c6335c9c.chunk.js","sourcesContent":["import { atom, selector } from \"recoil\";\r\n\r\nlet output = localStorage.getItem(\"toDo\");\r\nlet localData = JSON.parse(output as any);\r\n\r\nexport enum Categories {\r\n  \"TO_DO\" = \"TO_DO\",\r\n  \"DOING\" = \"DOING\",\r\n  \"DONE\" = \"DONE\",\r\n  \"DELETE\" = \"DELETE\",\r\n}\r\n\r\nexport interface IToDo {\r\n  text: string;\r\n  id: number;\r\n  category: Categories;\r\n}\r\n\r\nexport const categoryState = atom<Categories>({\r\n  key: \"category\",\r\n  default: Categories.TO_DO,\r\n});\r\n\r\nexport const toDoState = atom<IToDo[]>({\r\n  key: \"toDo\",\r\n  default: localData === null ? [] : localData,\r\n});\r\n\r\nexport const toDoSelector = selector({\r\n  key: \"toDoSelector\",\r\n  get: ({ get }) => {\r\n    const toDos = get(toDoState);\r\n    const category = get(categoryState);\r\n    return toDos.filter((toDo) => toDo.category === category);\r\n  },\r\n});\r\n","import { useForm } from \"react-hook-form\";\r\nimport { useRecoilValue, useSetRecoilState } from \"recoil\";\r\nimport { categoryState, toDoState } from \"../atoms\";\r\n\r\ninterface IForm {\r\n  toDo: string;\r\n}\r\n\r\nfunction CreateToDo() {\r\n  const setToDos = useSetRecoilState(toDoState);\r\n  const category = useRecoilValue(categoryState);\r\n  const { register, handleSubmit, setValue } = useForm<IForm>();\r\n  const handleValid = ({ toDo }: IForm) => {\r\n    setToDos((oldToDos) => [\r\n      { text: toDo, id: Date.now(), category },\r\n      ...oldToDos,\r\n    ]);\r\n    setValue(\"toDo\", \"\");\r\n  };\r\n  return (\r\n    <form onSubmit={handleSubmit(handleValid)}>\r\n      <input\r\n        {...register(\"toDo\", {\r\n          required: \"Please write a To Do\",\r\n        })}\r\n        placeholder=\"Write a to do\"\r\n      />\r\n      <button>Add</button>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default CreateToDo;\r\n","import React from \"react\";\r\nimport { useRecoilValue, useSetRecoilState } from \"recoil\";\r\nimport { Categories, IToDo, toDoState } from \"../atoms\";\r\n\r\nfunction ToDo({ text, category, id }: IToDo) {\r\n  const setToDos = useSetRecoilState(toDoState);\r\n  const onClick = (event: React.MouseEvent<HTMLButtonElement>) => {\r\n    const {\r\n      currentTarget: { name },\r\n    } = event;\r\n    setToDos((oldToDos) => {\r\n      const targetIndex = oldToDos.findIndex((toDo) => toDo.id === id);\r\n      const newToDo = { text, id, category: name as any };\r\n      if (newToDo.category === \"DELETE\") {\r\n        return [\r\n          ...oldToDos.slice(0, targetIndex),\r\n          ...oldToDos.slice(targetIndex + 1),\r\n        ];\r\n      } else {\r\n        return [\r\n          ...oldToDos.slice(0, targetIndex),\r\n          newToDo,\r\n          ...oldToDos.slice(targetIndex + 1),\r\n        ];\r\n      }\r\n    });\r\n  };\r\n  localStorage.setItem(\"toDo\", JSON.stringify(useRecoilValue(toDoState)));\r\n  return (\r\n    <li>\r\n      <span>{text}</span>\r\n      {category !== Categories.DOING && (\r\n        <button name={Categories.DOING} onClick={onClick}>\r\n          Doing\r\n        </button>\r\n      )}\r\n      {category !== Categories.TO_DO && (\r\n        <button name={Categories.TO_DO} onClick={onClick}>\r\n          To Do\r\n        </button>\r\n      )}\r\n      {category !== Categories.DONE && (\r\n        <button name={Categories.DONE} onClick={onClick}>\r\n          Done\r\n        </button>\r\n      )}\r\n      <button name={Categories.DELETE} onClick={onClick}>\r\n        Delete\r\n      </button>\r\n    </li>\r\n  );\r\n}\r\n\r\nexport default ToDo;\r\n","import React from \"react\";\r\nimport { useRecoilState, useRecoilValue } from \"recoil\";\r\nimport { Categories, categoryState, toDoSelector } from \"../atoms\";\r\nimport CreateToDo from \"./CreateToDo\";\r\nimport ToDo from \"./ToDo\";\r\n\r\nfunction ToDoList() {\r\n  const toDos = useRecoilValue(toDoSelector);\r\n  const [category, setCategory] = useRecoilState(categoryState);\r\n  const onInput = (event: React.FormEvent<HTMLSelectElement>) => {\r\n    setCategory(event.currentTarget.value as any);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>To Dos</h1>\r\n      <hr />\r\n      <select value={category} onInput={onInput}>\r\n        <option value={Categories.TO_DO}>To Do</option>\r\n        <option value={Categories.DOING}>Doing</option>\r\n        <option value={Categories.DONE}>Done</option>\r\n      </select>\r\n      <CreateToDo />\r\n      {toDos?.map((toDo) => (\r\n        <ToDo key={toDo.id} {...toDo} />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ToDoList;\r\n","import { createGlobalStyle } from \"styled-components\";\nimport ToDoList from \"./components/ToDoList\";\n\nconst GlobalStyle = createGlobalStyle`\n@import url('https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@300;400&display=swap');\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, menu, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed,\nfigure, figcaption, footer, header, hgroup,\nmain, menu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n  margin: 0;\n  padding: 0;\n  border: 0;\n  font-size: 100%;\n  font: inherit;\n  vertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure,\nfooter, header, hgroup, main, menu, nav, section {\n  display: block;\n}\n/* HTML5 hidden-attribute fix for newer browsers */\n*[hidden] {\n    display: none;\n}\nbody {\n  line-height: 1;\n}\nmenu, ol, ul {\n  list-style: none;\n}\nblockquote, q {\n  quotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n  content: '';\n  content: none;\n}\ntable {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\na {\n  text-decoration: none;\n  color: inherit;\n}\n`;\n\nfunction App() {\n  return (\n    <>\n      <GlobalStyle />\n      <ToDoList />\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { RecoilRoot } from \"recoil\";\nimport { ThemeProvider } from \"styled-components\";\nimport App from \"./App\";\nimport { darkTheme } from \"./theme\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <ThemeProvider theme={darkTheme}>\n        <App />\n      </ThemeProvider>\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","import { DefaultTheme } from \"styled-components\";\r\n\r\nexport const darkTheme: DefaultTheme = {\r\n  bgColor: \"#2f3640\",\r\n  textColor: \"white\",\r\n  accentColor: \"#9c88ff\",\r\n};\r\n"],"sourceRoot":""}